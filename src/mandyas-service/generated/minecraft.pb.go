// Code generated by protoc-gen-go. DO NOT EDIT.
// source: minecraft.proto

package mandyas

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ServerStatus_Status int32

const (
	ServerStatus_FAILED  ServerStatus_Status = 0
	ServerStatus_RUNNING ServerStatus_Status = 1
)

var ServerStatus_Status_name = map[int32]string{
	0: "FAILED",
	1: "RUNNING",
}
var ServerStatus_Status_value = map[string]int32{
	"FAILED":  0,
	"RUNNING": 1,
}

func (x ServerStatus_Status) String() string {
	return proto.EnumName(ServerStatus_Status_name, int32(x))
}
func (ServerStatus_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_minecraft_baa88bf9909cc5f5, []int{2, 0}
}

type ServerCommand struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Utctimestamp         uint64   `protobuf:"varint,2,opt,name=utctimestamp" json:"utctimestamp,omitempty"`
	Command              []byte   `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerCommand) Reset()         { *m = ServerCommand{} }
func (m *ServerCommand) String() string { return proto.CompactTextString(m) }
func (*ServerCommand) ProtoMessage()    {}
func (*ServerCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_minecraft_baa88bf9909cc5f5, []int{0}
}
func (m *ServerCommand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerCommand.Unmarshal(m, b)
}
func (m *ServerCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerCommand.Marshal(b, m, deterministic)
}
func (dst *ServerCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerCommand.Merge(dst, src)
}
func (m *ServerCommand) XXX_Size() int {
	return xxx_messageInfo_ServerCommand.Size(m)
}
func (m *ServerCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerCommand.DiscardUnknown(m)
}

var xxx_messageInfo_ServerCommand proto.InternalMessageInfo

func (m *ServerCommand) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ServerCommand) GetUtctimestamp() uint64 {
	if m != nil {
		return m.Utctimestamp
	}
	return 0
}

func (m *ServerCommand) GetCommand() []byte {
	if m != nil {
		return m.Command
	}
	return nil
}

type ServerOutput struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Utctimestamp         uint64   `protobuf:"varint,2,opt,name=utctimestamp" json:"utctimestamp,omitempty"`
	Content              []byte   `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerOutput) Reset()         { *m = ServerOutput{} }
func (m *ServerOutput) String() string { return proto.CompactTextString(m) }
func (*ServerOutput) ProtoMessage()    {}
func (*ServerOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_minecraft_baa88bf9909cc5f5, []int{1}
}
func (m *ServerOutput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerOutput.Unmarshal(m, b)
}
func (m *ServerOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerOutput.Marshal(b, m, deterministic)
}
func (dst *ServerOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerOutput.Merge(dst, src)
}
func (m *ServerOutput) XXX_Size() int {
	return xxx_messageInfo_ServerOutput.Size(m)
}
func (m *ServerOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerOutput.DiscardUnknown(m)
}

var xxx_messageInfo_ServerOutput proto.InternalMessageInfo

func (m *ServerOutput) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ServerOutput) GetUtctimestamp() uint64 {
	if m != nil {
		return m.Utctimestamp
	}
	return 0
}

func (m *ServerOutput) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type ServerStatus struct {
	Id                   uint64              `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Utctimestamp         uint64              `protobuf:"varint,2,opt,name=utctimestamp" json:"utctimestamp,omitempty"`
	Status               ServerStatus_Status `protobuf:"varint,3,opt,name=status,enum=mandyas.ServerStatus_Status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ServerStatus) Reset()         { *m = ServerStatus{} }
func (m *ServerStatus) String() string { return proto.CompactTextString(m) }
func (*ServerStatus) ProtoMessage()    {}
func (*ServerStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_minecraft_baa88bf9909cc5f5, []int{2}
}
func (m *ServerStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerStatus.Unmarshal(m, b)
}
func (m *ServerStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerStatus.Marshal(b, m, deterministic)
}
func (dst *ServerStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerStatus.Merge(dst, src)
}
func (m *ServerStatus) XXX_Size() int {
	return xxx_messageInfo_ServerStatus.Size(m)
}
func (m *ServerStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ServerStatus proto.InternalMessageInfo

func (m *ServerStatus) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ServerStatus) GetUtctimestamp() uint64 {
	if m != nil {
		return m.Utctimestamp
	}
	return 0
}

func (m *ServerStatus) GetStatus() ServerStatus_Status {
	if m != nil {
		return m.Status
	}
	return ServerStatus_FAILED
}

func init() {
	proto.RegisterType((*ServerCommand)(nil), "mandyas.ServerCommand")
	proto.RegisterType((*ServerOutput)(nil), "mandyas.ServerOutput")
	proto.RegisterType((*ServerStatus)(nil), "mandyas.ServerStatus")
	proto.RegisterEnum("mandyas.ServerStatus_Status", ServerStatus_Status_name, ServerStatus_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MandyasServiceClient is the client API for MandyasService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MandyasServiceClient interface {
	SendCommand(ctx context.Context, in *ServerCommand, opts ...grpc.CallOption) (*empty.Empty, error)
	GetServerOutput(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MandyasService_GetServerOutputClient, error)
	GetStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ServerStatus, error)
}

type mandyasServiceClient struct {
	cc *grpc.ClientConn
}

func NewMandyasServiceClient(cc *grpc.ClientConn) MandyasServiceClient {
	return &mandyasServiceClient{cc}
}

func (c *mandyasServiceClient) SendCommand(ctx context.Context, in *ServerCommand, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/mandyas.MandyasService/SendCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mandyasServiceClient) GetServerOutput(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MandyasService_GetServerOutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MandyasService_serviceDesc.Streams[0], "/mandyas.MandyasService/GetServerOutput", opts...)
	if err != nil {
		return nil, err
	}
	x := &mandyasServiceGetServerOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MandyasService_GetServerOutputClient interface {
	Recv() (*ServerOutput, error)
	grpc.ClientStream
}

type mandyasServiceGetServerOutputClient struct {
	grpc.ClientStream
}

func (x *mandyasServiceGetServerOutputClient) Recv() (*ServerOutput, error) {
	m := new(ServerOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mandyasServiceClient) GetStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ServerStatus, error) {
	out := new(ServerStatus)
	err := c.cc.Invoke(ctx, "/mandyas.MandyasService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MandyasServiceServer is the server API for MandyasService service.
type MandyasServiceServer interface {
	SendCommand(context.Context, *ServerCommand) (*empty.Empty, error)
	GetServerOutput(*empty.Empty, MandyasService_GetServerOutputServer) error
	GetStatus(context.Context, *empty.Empty) (*ServerStatus, error)
}

func RegisterMandyasServiceServer(s *grpc.Server, srv MandyasServiceServer) {
	s.RegisterService(&_MandyasService_serviceDesc, srv)
}

func _MandyasService_SendCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MandyasServiceServer).SendCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mandyas.MandyasService/SendCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MandyasServiceServer).SendCommand(ctx, req.(*ServerCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _MandyasService_GetServerOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MandyasServiceServer).GetServerOutput(m, &mandyasServiceGetServerOutputServer{stream})
}

type MandyasService_GetServerOutputServer interface {
	Send(*ServerOutput) error
	grpc.ServerStream
}

type mandyasServiceGetServerOutputServer struct {
	grpc.ServerStream
}

func (x *mandyasServiceGetServerOutputServer) Send(m *ServerOutput) error {
	return x.ServerStream.SendMsg(m)
}

func _MandyasService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MandyasServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mandyas.MandyasService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MandyasServiceServer).GetStatus(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _MandyasService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mandyas.MandyasService",
	HandlerType: (*MandyasServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCommand",
			Handler:    _MandyasService_SendCommand_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _MandyasService_GetStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetServerOutput",
			Handler:       _MandyasService_GetServerOutput_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "minecraft.proto",
}

func init() { proto.RegisterFile("minecraft.proto", fileDescriptor_minecraft_baa88bf9909cc5f5) }

var fileDescriptor_minecraft_baa88bf9909cc5f5 = []byte{
	// 312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xc1, 0x4a, 0xf3, 0x40,
	0x10, 0xc7, 0xb3, 0xfd, 0x3e, 0x52, 0x9c, 0xc6, 0xb4, 0x2c, 0x58, 0x42, 0xf4, 0x50, 0xf7, 0xd4,
	0xd3, 0x56, 0xaa, 0x47, 0x41, 0xc4, 0xd6, 0x52, 0xd0, 0x08, 0x09, 0xde, 0xf4, 0x90, 0x26, 0xdb,
	0x12, 0x70, 0x93, 0x90, 0x4c, 0x84, 0x3e, 0x8b, 0xcf, 0xe5, 0xfb, 0x48, 0x76, 0x13, 0xb4, 0x05,
	0x41, 0x7a, 0x0a, 0x33, 0xf9, 0xfd, 0x7f, 0xb3, 0xcc, 0x40, 0x5f, 0x26, 0xa9, 0x88, 0x8a, 0x70,
	0x8d, 0x3c, 0x2f, 0x32, 0xcc, 0x68, 0x57, 0x86, 0x69, 0xbc, 0x0d, 0x4b, 0xf7, 0x74, 0x93, 0x65,
	0x9b, 0x37, 0x31, 0x51, 0xed, 0x55, 0xb5, 0x9e, 0x08, 0x99, 0xe3, 0x56, 0x53, 0xec, 0x15, 0x8e,
	0x03, 0x51, 0xbc, 0x8b, 0xe2, 0x2e, 0x93, 0x75, 0x80, 0xda, 0xd0, 0x49, 0x62, 0x87, 0x8c, 0xc8,
	0xf8, 0xbf, 0xdf, 0x49, 0x62, 0xca, 0xc0, 0xaa, 0x30, 0xc2, 0x44, 0x8a, 0x12, 0x43, 0x99, 0x3b,
	0x1d, 0xf5, 0x67, 0xa7, 0x47, 0x1d, 0xe8, 0x46, 0x3a, 0xee, 0xfc, 0x1b, 0x91, 0xb1, 0xe5, 0xb7,
	0x25, 0x7b, 0x01, 0x4b, 0xeb, 0x9f, 0x2a, 0xcc, 0x2b, 0x3c, 0xdc, 0x9e, 0xa2, 0x48, 0xf1, 0xdb,
	0xae, 0x4a, 0xf6, 0x41, 0x5a, 0x7d, 0x80, 0x21, 0x56, 0xe5, 0x41, 0xfa, 0x2b, 0x30, 0x4b, 0x95,
	0x56, 0x76, 0x7b, 0x7a, 0xc6, 0x9b, 0xc5, 0xf1, 0x9f, 0x6a, 0xae, 0x3f, 0x7e, 0xc3, 0xb2, 0x73,
	0x30, 0x9b, 0x99, 0x00, 0xe6, 0xfd, 0xed, 0xf2, 0x61, 0x3e, 0x1b, 0x18, 0xb4, 0x07, 0x5d, 0xff,
	0xd9, 0xf3, 0x96, 0xde, 0x62, 0x40, 0xa6, 0x9f, 0x04, 0xec, 0x47, 0xad, 0xaa, 0x4d, 0x49, 0x24,
	0xe8, 0x0d, 0xf4, 0x02, 0x91, 0xc6, 0xed, 0xae, 0x87, 0x7b, 0xa3, 0x9a, 0xbe, 0x3b, 0xe4, 0xfa,
	0x64, 0xbc, 0x3d, 0x19, 0x9f, 0xd7, 0x27, 0x63, 0x06, 0x9d, 0x41, 0x7f, 0x21, 0x70, 0x67, 0xa5,
	0xbf, 0xc0, 0xee, 0xc9, 0x9e, 0x5c, 0xe3, 0xcc, 0xb8, 0x20, 0xf4, 0x1a, 0x8e, 0x6a, 0x8b, 0x7e,
	0xff, 0x5f, 0xf3, 0x1a, 0x67, 0xc6, 0xca, 0x54, 0xe0, 0xe5, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xd0, 0x35, 0xe9, 0x1b, 0x72, 0x02, 0x00, 0x00,
}
